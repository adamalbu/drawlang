Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE

Grammar

Rule 0     S' -> program
Rule 1     program -> program command
Rule 2     program -> command
Rule 3     command -> PAINT expression
Rule 4     command -> ID EQUALS expression
Rule 5     expression -> ID
Rule 6     expression -> expression PLUS expression
Rule 7     expression -> expression MINUS expression
Rule 8     expression -> expression TIMES expression
Rule 9     expression -> expression DIVIDE expression
Rule 10    expression -> NUMBER
Rule 11    expression -> LPAREN expression RPAREN
Rule 12    expression -> STRING

Terminals, with rules where they appear

DIVIDE               : 9
EQUALS               : 4
ID                   : 4 5
LPAREN               : 11
MINUS                : 7
NEWLINE              : 
NUMBER               : 10
PAINT                : 3
PLUS                 : 6
RPAREN               : 11
STRING               : 12
TIMES                : 8
error                : 

Nonterminals, with rules where they appear

command              : 1 2
expression           : 3 4 6 6 7 7 8 8 9 9 11
program              : 1 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program command
    (2) program -> . command
    (3) command -> . PAINT expression
    (4) command -> . ID EQUALS expression

    PAINT           shift and go to state 3
    ID              shift and go to state 4

    program                        shift and go to state 1
    command                        shift and go to state 2

state 1

    (0) S' -> program .
    (1) program -> program . command
    (3) command -> . PAINT expression
    (4) command -> . ID EQUALS expression

    PAINT           shift and go to state 3
    ID              shift and go to state 4

    command                        shift and go to state 5

state 2

    (2) program -> command .

    PAINT           reduce using rule 2 (program -> command .)
    ID              reduce using rule 2 (program -> command .)
    $end            reduce using rule 2 (program -> command .)


state 3

    (3) command -> PAINT . expression
    (5) expression -> . ID
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . NUMBER
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . STRING

    ID              shift and go to state 7
    NUMBER          shift and go to state 8
    LPAREN          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 6

state 4

    (4) command -> ID . EQUALS expression

    EQUALS          shift and go to state 11


state 5

    (1) program -> program command .

    PAINT           reduce using rule 1 (program -> program command .)
    ID              reduce using rule 1 (program -> program command .)
    $end            reduce using rule 1 (program -> program command .)


state 6

    (3) command -> PAINT expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression

    PAINT           reduce using rule 3 (command -> PAINT expression .)
    ID              reduce using rule 3 (command -> PAINT expression .)
    $end            reduce using rule 3 (command -> PAINT expression .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15


state 7

    (5) expression -> ID .

    PLUS            reduce using rule 5 (expression -> ID .)
    MINUS           reduce using rule 5 (expression -> ID .)
    TIMES           reduce using rule 5 (expression -> ID .)
    DIVIDE          reduce using rule 5 (expression -> ID .)
    PAINT           reduce using rule 5 (expression -> ID .)
    ID              reduce using rule 5 (expression -> ID .)
    $end            reduce using rule 5 (expression -> ID .)
    RPAREN          reduce using rule 5 (expression -> ID .)


state 8

    (10) expression -> NUMBER .

    PLUS            reduce using rule 10 (expression -> NUMBER .)
    MINUS           reduce using rule 10 (expression -> NUMBER .)
    TIMES           reduce using rule 10 (expression -> NUMBER .)
    DIVIDE          reduce using rule 10 (expression -> NUMBER .)
    PAINT           reduce using rule 10 (expression -> NUMBER .)
    ID              reduce using rule 10 (expression -> NUMBER .)
    $end            reduce using rule 10 (expression -> NUMBER .)
    RPAREN          reduce using rule 10 (expression -> NUMBER .)


state 9

    (11) expression -> LPAREN . expression RPAREN
    (5) expression -> . ID
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . NUMBER
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . STRING

    ID              shift and go to state 7
    NUMBER          shift and go to state 8
    LPAREN          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 16

state 10

    (12) expression -> STRING .

    PLUS            reduce using rule 12 (expression -> STRING .)
    MINUS           reduce using rule 12 (expression -> STRING .)
    TIMES           reduce using rule 12 (expression -> STRING .)
    DIVIDE          reduce using rule 12 (expression -> STRING .)
    PAINT           reduce using rule 12 (expression -> STRING .)
    ID              reduce using rule 12 (expression -> STRING .)
    $end            reduce using rule 12 (expression -> STRING .)
    RPAREN          reduce using rule 12 (expression -> STRING .)


state 11

    (4) command -> ID EQUALS . expression
    (5) expression -> . ID
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . NUMBER
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . STRING

    ID              shift and go to state 7
    NUMBER          shift and go to state 8
    LPAREN          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 17

state 12

    (6) expression -> expression PLUS . expression
    (5) expression -> . ID
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . NUMBER
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . STRING

    ID              shift and go to state 7
    NUMBER          shift and go to state 8
    LPAREN          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 18

state 13

    (7) expression -> expression MINUS . expression
    (5) expression -> . ID
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . NUMBER
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . STRING

    ID              shift and go to state 7
    NUMBER          shift and go to state 8
    LPAREN          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 19

state 14

    (8) expression -> expression TIMES . expression
    (5) expression -> . ID
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . NUMBER
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . STRING

    ID              shift and go to state 7
    NUMBER          shift and go to state 8
    LPAREN          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 20

state 15

    (9) expression -> expression DIVIDE . expression
    (5) expression -> . ID
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . NUMBER
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . STRING

    ID              shift and go to state 7
    NUMBER          shift and go to state 8
    LPAREN          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 21

state 16

    (11) expression -> LPAREN expression . RPAREN
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 22
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15


state 17

    (4) command -> ID EQUALS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression

    PAINT           reduce using rule 4 (command -> ID EQUALS expression .)
    ID              reduce using rule 4 (command -> ID EQUALS expression .)
    $end            reduce using rule 4 (command -> ID EQUALS expression .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15


state 18

    (6) expression -> expression PLUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 6 (expression -> expression PLUS expression .)
    PAINT           reduce using rule 6 (expression -> expression PLUS expression .)
    ID              reduce using rule 6 (expression -> expression PLUS expression .)
    $end            reduce using rule 6 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 6 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15

  ! TIMES           [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]


state 19

    (7) expression -> expression MINUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 7 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 7 (expression -> expression MINUS expression .)
    PAINT           reduce using rule 7 (expression -> expression MINUS expression .)
    ID              reduce using rule 7 (expression -> expression MINUS expression .)
    $end            reduce using rule 7 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 7 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15

  ! TIMES           [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]


state 20

    (8) expression -> expression TIMES expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 8 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 8 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 8 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 8 (expression -> expression TIMES expression .)
    PAINT           reduce using rule 8 (expression -> expression TIMES expression .)
    ID              reduce using rule 8 (expression -> expression TIMES expression .)
    $end            reduce using rule 8 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 8 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! TIMES           [ shift and go to state 14 ]
  ! DIVIDE          [ shift and go to state 15 ]


state 21

    (9) expression -> expression DIVIDE expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 9 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 9 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 9 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 9 (expression -> expression DIVIDE expression .)
    PAINT           reduce using rule 9 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 9 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 9 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 9 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! TIMES           [ shift and go to state 14 ]
  ! DIVIDE          [ shift and go to state 15 ]


state 22

    (11) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    PAINT           reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 11 (expression -> LPAREN expression RPAREN .)

